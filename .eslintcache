[{"C:\\projects\\handydiet-v2\\src\\index.js":"1","C:\\projects\\handydiet-v2\\src\\App.js":"2","C:\\projects\\handydiet-v2\\src\\reportWebVitals.js":"3","C:\\projects\\handydiet-v2\\src\\components\\Home\\Home.js":"4","C:\\projects\\handydiet-v2\\src\\components\\Home\\Recipes.js":"5","C:\\projects\\handydiet-v2\\src\\components\\Home\\CuisineOptions.js":"6","C:\\projects\\handydiet-v2\\src\\components\\Errors\\NetworkError.js":"7","C:\\projects\\handydiet-v2\\src\\components\\LoadingSpinner\\Loading.js":"8","C:\\projects\\handydiet-v2\\src\\components\\Recipe.js":"9"},{"size":499,"mtime":1608399409021,"results":"10","hashOfConfig":"11"},{"size":414,"mtime":1608431753203,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":2944,"mtime":1608433804667,"results":"14","hashOfConfig":"11"},{"size":1348,"mtime":1608431823023,"results":"15","hashOfConfig":"11"},{"size":1043,"mtime":1608495091792,"results":"16","hashOfConfig":"11"},{"size":543,"mtime":1608494905234,"results":"17","hashOfConfig":"11"},{"size":272,"mtime":1608428772663,"results":"18","hashOfConfig":"11"},{"size":2736,"mtime":1608494921583,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"j26poe",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},"C:\\projects\\handydiet-v2\\src\\index.js",[],["42","43"],"C:\\projects\\handydiet-v2\\src\\App.js",[],"C:\\projects\\handydiet-v2\\src\\reportWebVitals.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Home\\Home.js",["44"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\nimport CuisineOptions from './CuisineOptions';\r\nimport NetworkError from '../Errors/NetworkError';\r\nimport Recipes from './Recipes';\r\nimport LoadingSpinner from '../LoadingSpinner/Loading';\r\n\r\nconst Home = () => {\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [networkError, setNetworkError] = useState({\r\n        bool: false,\r\n        text: ''\r\n    })\r\n    const [cuisine, setCuisine] = useState('American');\r\n    const isMounted = useRef(false);\r\n\r\n    useEffect(() => {\r\n        fetchRecipes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            fetchCuisine();\r\n        } else {\r\n            isMounted.current = true;\r\n        };\r\n    }, [cuisine]);\r\n\r\n    const fetchRecipes = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/complexSearch/?cuisine=American&addRecipeInformation=true&apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                setRecipes(toJson.results);\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, text: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    const fetchCuisine = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/complexSearch/?cuisine=${cuisine}&addRecipeInformation=true&apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                setRecipes(toJson.results);\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, text: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <CuisineOptions setCuisine={setCuisine} />\r\n            <Recipes rec={recipes} />\r\n            <LoadingSpinner bool={isLoaded} />\r\n            <NetworkError bool={networkError.bool} text={networkError.text} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\projects\\handydiet-v2\\src\\components\\Home\\Recipes.js",["45"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Recipes = ({ rec }) => {\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            width: '100%',\r\n            flexDirection: 'row',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'center'\r\n        }}>\r\n            {rec.map(r => {\r\n                return (\r\n                    <Link key={r.id} to={`/recipe/${r.id}`} className=\"recipe-card\">\r\n                        <img src={r.image} className=\"responsive\" />\r\n                        <div style={{ overflowWrap: 'break-word' }}>{r.title}</div>\r\n                        <br />\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            bottom: 5,\r\n                            left: 10,\r\n                            fontSize: '1.5rem'\r\n                        }}>{r.spoonacularScore}%</div>\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            bottom: 5,\r\n                            right: 10,\r\n                            fontSize: '1.5rem'\r\n                        }}><i style={{ color: 'red' }} className=\"fas fa-heart\"></i></div>\r\n                    </Link>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipes;","C:\\projects\\handydiet-v2\\src\\components\\Home\\CuisineOptions.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Errors\\NetworkError.js",[],"C:\\projects\\handydiet-v2\\src\\components\\LoadingSpinner\\Loading.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Recipe.js",["46","47"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport LoadingSpinner from './LoadingSpinner/Loading';\r\nimport { useParams } from 'react-router-dom';\r\nimport NetworkError from './Errors/NetworkError';\r\n\r\nconst Recipe = () => {\r\n    const { id } = useParams();\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [networkError, setNetworkError] = useState({\r\n        bool: false,\r\n        text: ''\r\n    });\r\n    const [recipe, setRecipe] = useState(null);\r\n    const [ingredients, setIngredients] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetchRecipe();\r\n    }, []);\r\n\r\n    const fetchRecipe = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/${id}/information?apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            console.log(response)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                setRecipe(toJson);\r\n                setIngredients(toJson.extendedIngredients);\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, text: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const newArr = [...ingredients];\r\n        newArr.map(i => i.newAmount = i.amount * e.target.value);\r\n        setIngredients(newArr);\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <LoadingSpinner bool={isLoaded} />\r\n            {recipe &&\r\n                <Fragment>\r\n                    <div>{recipe.id}</div>\r\n                    <div>{recipe.title}</div>\r\n                    <img src={recipe.image} />\r\n                    <p>{recipe.summary.replace(/(<([^>]+)>)/gi, \"\")}</p>\r\n                    <div>\r\n                        {ingredients && ingredients.map(ingredient => {\r\n                            return (\r\n                                <div>{ingredient.name} | {ingredient.newAmount ? ingredient.newAmount : ingredient.amount} {ingredient.unit}</div>\r\n                            );\r\n                        })}\r\n                        <input type=\"number\" onChange={(e) => handleChange(e)} min=\"1\" max=\"20\" step=\"1\" />\r\n                    </div>\r\n                </Fragment>}\r\n            <NetworkError bool={networkError.bool} text={networkError.text} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Recipe;",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":27,"column":8,"nodeType":"54","endLine":27,"endColumn":17,"suggestions":"55"},{"ruleId":"56","severity":1,"message":"57","line":17,"column":25,"nodeType":"58","endLine":17,"endColumn":69},{"ruleId":"52","severity":1,"message":"59","line":18,"column":8,"nodeType":"54","endLine":18,"endColumn":10,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"57","line":53,"column":21,"nodeType":"58","endLine":53,"endColumn":47},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCuisine'. Either include it or remove the dependency array.","ArrayExpression",["63"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'fetchRecipe'. Either include it or remove the dependency array.",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [cuisine, fetchCuisine]",{"range":"69","text":"70"},"Update the dependencies array to be: [fetchRecipe]",{"range":"71","text":"72"},[815,824],"[cuisine, fetchCuisine]",[597,599],"[fetchRecipe]"]