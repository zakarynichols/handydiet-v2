[{"C:\\projects\\handydiet-v2\\src\\index.js":"1","C:\\projects\\handydiet-v2\\src\\App.js":"2","C:\\projects\\handydiet-v2\\src\\reportWebVitals.js":"3","C:\\projects\\handydiet-v2\\src\\components\\Home\\Home.js":"4","C:\\projects\\handydiet-v2\\src\\components\\Home\\Recipes.js":"5","C:\\projects\\handydiet-v2\\src\\components\\Home\\CuisineOptions.js":"6","C:\\projects\\handydiet-v2\\src\\components\\Errors\\NetworkError.js":"7","C:\\projects\\handydiet-v2\\src\\components\\LoadingSpinner\\Loading.js":"8","C:\\projects\\handydiet-v2\\src\\components\\Recipe.js":"9","C:\\projects\\handydiet-v2\\src\\assets\\canvasjs.react.js":"10","C:\\projects\\handydiet-v2\\src\\assets\\canvasjs.min.js":"11"},{"size":499,"mtime":1608399409021,"results":"12","hashOfConfig":"13"},{"size":414,"mtime":1608431753203,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":2999,"mtime":1608694014955,"results":"16","hashOfConfig":"13"},{"size":1348,"mtime":1608431823023,"results":"17","hashOfConfig":"13"},{"size":1049,"mtime":1608501749893,"results":"18","hashOfConfig":"13"},{"size":549,"mtime":1608599057699,"results":"19","hashOfConfig":"13"},{"size":272,"mtime":1608428772663,"results":"20","hashOfConfig":"13"},{"size":5182,"mtime":1608693901988,"results":"21","hashOfConfig":"13"},{"size":1720,"mtime":1608516377685,"results":"22","hashOfConfig":"13"},{"size":459238,"mtime":1608517574801,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"j26poe",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"C:\\projects\\handydiet-v2\\src\\index.js",[],["51","52"],"C:\\projects\\handydiet-v2\\src\\App.js",[],"C:\\projects\\handydiet-v2\\src\\reportWebVitals.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Home\\Home.js",["53"],"import React, { Fragment, useState, useEffect, useRef } from 'react';\r\nimport CuisineOptions from './CuisineOptions';\r\nimport NetworkError from '../Errors/NetworkError';\r\nimport Recipes from './Recipes';\r\nimport LoadingSpinner from '../LoadingSpinner/Loading';\r\n\r\nconst Home = () => {\r\n    const [recipes, setRecipes] = useState([]);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [networkError, setNetworkError] = useState({\r\n        bool: false,\r\n        message: ''\r\n    });\r\n    const [cuisine, setCuisine] = useState('American');\r\n    const isMounted = useRef(false);\r\n\r\n    useEffect(() => {\r\n        fetchRecipes();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isMounted.current) {\r\n            fetchCuisine();\r\n        } else {\r\n            isMounted.current = true;\r\n        };\r\n    }, [cuisine]);\r\n\r\n    const fetchRecipes = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/complexSearch/?cuisine=American&addRecipeInformation=true&apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                console.warn(toJson);\r\n                setRecipes(toJson.results);\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, message: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    const fetchCuisine = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/complexSearch/?cuisine=${cuisine}&addRecipeInformation=true&apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                setRecipes(toJson.results);\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, message: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <CuisineOptions setCuisine={setCuisine} />\r\n            <Recipes rec={recipes} />\r\n            <LoadingSpinner bool={isLoaded} />\r\n            <NetworkError bool={networkError.bool} message={networkError.message} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Home;","C:\\projects\\handydiet-v2\\src\\components\\Home\\Recipes.js",["54"],"import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Recipes = ({ rec }) => {\r\n\r\n    return (\r\n        <div style={{\r\n            display: 'flex',\r\n            width: '100%',\r\n            flexDirection: 'row',\r\n            flexWrap: 'wrap',\r\n            justifyContent: 'center'\r\n        }}>\r\n            {rec.map(r => {\r\n                return (\r\n                    <Link key={r.id} to={`/recipe/${r.id}`} className=\"recipe-card\">\r\n                        <img src={r.image} className=\"responsive\" />\r\n                        <div style={{ overflowWrap: 'break-word' }}>{r.title}</div>\r\n                        <br />\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            bottom: 5,\r\n                            left: 10,\r\n                            fontSize: '1.5rem'\r\n                        }}>{r.spoonacularScore}%</div>\r\n                        <div style={{\r\n                            position: 'absolute',\r\n                            bottom: 5,\r\n                            right: 10,\r\n                            fontSize: '1.5rem'\r\n                        }}><i style={{ color: 'red' }} className=\"fas fa-heart\"></i></div>\r\n                    </Link>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipes;","C:\\projects\\handydiet-v2\\src\\components\\Home\\CuisineOptions.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Errors\\NetworkError.js",[],"C:\\projects\\handydiet-v2\\src\\components\\LoadingSpinner\\Loading.js",[],"C:\\projects\\handydiet-v2\\src\\components\\Recipe.js",["55","56","57","58","59","60","61"],"import React, {\r\n    useState,\r\n    useEffect,\r\n    useCallback,\r\n    useRef\r\n} from 'react';\r\nimport LoadingSpinner from './LoadingSpinner/Loading';\r\nimport { useParams } from 'react-router-dom';\r\nimport NetworkError from './Errors/NetworkError';\r\nimport CanvasJSReact from '../assets/canvasjs.react';\r\nconst CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\n\r\nconst Recipe = () => {\r\n    const { id } = useParams();\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [networkError, setNetworkError] = useState({\r\n        bool: false,\r\n        message: ''\r\n    });\r\n    const [recipe, setRecipe] = useState(null);\r\n    const [ingredients, setIngredients] = useState([]);\r\n    const [nutrition, setNutrition] = useState([]);\r\n\r\n    const options = {\r\n        backgroundColor: \"#f9f9f9\",\r\n        animationEnabled: true,\r\n        title: {\r\n            text: \"Calorie & Macronutrients\"\r\n        },\r\n        subtitles: [{\r\n            text: \"Nutrient Analysis\",\r\n            verticalAlign: \"center\",\r\n            fontSize: 22,\r\n            dockInsidePlotArea: true\r\n        }],\r\n        data: [{\r\n            type: \"doughnut\",\r\n            showInLegend: true,\r\n            indexLabel: `{name} - {y}`,\r\n            yValueFormatString: \"#,###'%'\",\r\n            dataPoints: [\r\n                {\r\n                    name: \"Carbs\",\r\n                    y: nutrition.caloricBreakdown ? nutrition.caloricBreakdown.percentCarbs : null,\r\n                    name: `Carbs ${nutrition.caloricBreakdown ? nutrition.nutrients[3].amount : null}g`\r\n                },\r\n                {\r\n                    name: \"Protein\",\r\n                    y: nutrition.caloricBreakdown ? nutrition.caloricBreakdown.percentProtein : null,\r\n                    name: `Protein ${nutrition.caloricBreakdown ? nutrition.nutrients[8].amount : null}g`\r\n                },\r\n                {\r\n                    name: \"Fat\",\r\n                    y: nutrition.caloricBreakdown ? nutrition.caloricBreakdown.percentFat : null,\r\n                    name: `Fat ${nutrition.caloricBreakdown ? nutrition.nutrients[1].amount : null}g`\r\n                },\r\n            ]\r\n        }]\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchRecipe();\r\n    }, []);\r\n\r\n    const fetchRecipe = async () => {\r\n        try {\r\n            const response = await fetch(`https://api.spoonacular.com/recipes/${id}/information?includeNutrition=true&apiKey=${process.env.REACT_APP_SPOONACULAR_API_KEY}`)\r\n            console.log(response)\r\n            if (response.ok === true && response.status === 200) {\r\n                setIsLoaded(true);\r\n                const toJson = await response.json();\r\n                console.warn(toJson);\r\n                setRecipe(toJson);\r\n                setIngredients(toJson.extendedIngredients);\r\n                setNutrition(toJson.nutrition)\r\n            };\r\n            if (response.ok === false && response.status === 402) {\r\n                setIsLoaded(true);\r\n                throw new Error('Too many requests. Only 150 requests per day on the free plan.');\r\n            };\r\n        } catch (err) {\r\n            console.error(err);\r\n            setNetworkError({ bool: true, message: 'Sorry! The Spoonacular API only allows 150 requests per day on the free plan.' });\r\n        };\r\n    };\r\n\r\n    const handleChange = (e) => {\r\n        const newArr = [...ingredients];\r\n        newArr.map(ingredient => ingredient.newAmount = ingredient.amount * e.target.value);\r\n        setIngredients(newArr);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <LoadingSpinner bool={isLoaded} />\r\n            {recipe &&\r\n                <div style={{ marginBottom: '5em' }} key={recipe.id}>\r\n                    <div>{recipe.id}</div>\r\n                    <h1>{recipe.title}</h1>\r\n                    <img className=\"responsive\" src={recipe.image} />\r\n                    <p style={{ width: '70vw', padding: '2em', margin: 'auto', marginTop: '2em' }}>{recipe.summary.replace(/(<([^>]+)>)/gi, \"\")}</p>\r\n                    <div style={{ width: '80vw', margin: 'auto', display: 'flex', flexWrap: 'wrap' }}>\r\n                        {ingredients && ingredients.map(ingredient => {\r\n                            return (\r\n                                <div style={{ padding: '2em', 'flex': '1 1 80px' }} key={ingredient.id}>\r\n                                    <strong>{ingredient.name}</strong>\r\n                                    <br />\r\n                                    {ingredient.newAmount ? ingredient.newAmount : ingredient.amount} {ingredient.unit}\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <div style={{ margin: 'auto', display: 'flex', width: '70vw' }}>\r\n                        <label>Text Input</label>\r\n                        <input type=\"number\" onChange={(e) => handleChange(e)} min=\"1\" max=\"20\" step=\"1\" />\r\n                    </div>\r\n                </div>}\r\n            <NetworkError bool={networkError.bool} message={networkError.message} />\r\n            {nutrition.caloricBreakdown && <CanvasJSChart options={options} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","C:\\projects\\handydiet-v2\\src\\assets\\canvasjs.react.js",[],"C:\\projects\\handydiet-v2\\src\\assets\\canvasjs.min.js",[],["62","63"],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":27,"column":8,"nodeType":"70","endLine":27,"endColumn":17,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":17,"column":25,"nodeType":"74","endLine":17,"endColumn":69},{"ruleId":"75","severity":1,"message":"76","line":4,"column":5,"nodeType":"77","messageId":"78","endLine":4,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":5,"column":5,"nodeType":"77","messageId":"78","endLine":5,"endColumn":11},{"ruleId":"80","severity":1,"message":"81","line":45,"column":21,"nodeType":"82","messageId":"83","endLine":45,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":50,"column":21,"nodeType":"82","messageId":"83","endLine":50,"endColumn":25},{"ruleId":"80","severity":1,"message":"81","line":55,"column":21,"nodeType":"82","messageId":"83","endLine":55,"endColumn":25},{"ruleId":"68","severity":1,"message":"84","line":63,"column":8,"nodeType":"70","endLine":63,"endColumn":10,"suggestions":"85"},{"ruleId":"72","severity":1,"message":"73","line":100,"column":21,"nodeType":"74","endLine":100,"endColumn":70},{"ruleId":"64","replacedBy":"86"},{"ruleId":"66","replacedBy":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchCuisine'. Either include it or remove the dependency array.","ArrayExpression",["90"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useCallback' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","no-dupe-keys","Duplicate key 'name'.","ObjectExpression","unexpected","React Hook useEffect has a missing dependency: 'fetchRecipe'. Either include it or remove the dependency array.",["91"],["88"],["89"],"no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [cuisine, fetchCuisine]",{"range":"96","text":"97"},"Update the dependencies array to be: [fetchRecipe]",{"range":"98","text":"99"},[819,828],"[cuisine, fetchCuisine]",[2215,2217],"[fetchRecipe]"]